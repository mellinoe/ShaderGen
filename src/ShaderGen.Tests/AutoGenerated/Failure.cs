using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using ShaderGen.Tests.Tools;

namespace ShaderGen.Tests.AutoGenerated
{
    /// <summary>
    /// A failure of a <see cref="MethodMap">tested method</see> occurs when the results are not approximately the same for all
    /// backends (and the CPU).
    /// </summary>
    internal class Failure
    {
        /// <summary>
        /// The method map
        /// </summary>
        public readonly MethodMap MethodMap;

        /// <summary>
        /// The parameters
        /// </summary>
        public readonly IReadOnlyList<object> Parameters;

        /// <summary>
        /// The test sets grouped by result.
        /// </summary>
        public readonly IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> Results;

        private readonly string _string;

        public Failure(MethodMap methodMap, object[] parameters,
            IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> results)
        {
            MethodMap = methodMap;
            Parameters = parameters;
            Results = results;

            MethodInfo method = MethodMap.Method;
            StringBuilder builder = new StringBuilder()
                .Append(method.Name)
                .Append('(')
                .Append(string.Join(", ", parameters))
                .Append(')');

            (string Name, object Value)[] resultGroups = results.Select(r => (Name: string.Join(", ", r.TestSets.Select(t => t.Name)), Value: r.Result)).ToArray();
            int pad = resultGroups.Max(r => r.Name.Length) + 3;
            foreach ((string Name, object Value) group in resultGroups)
            {
                builder.AppendLine(string.Empty)
                    .AppendFormat(group.Name.PadLeft(pad))
                    .Append(" = ")
                    .Append(group.Value);
            }

            _string = builder.ToString();
        }

        /// <summary>
        /// Checks the results sets and return a new <see cref="Failure"/> if they are inconsistent.
        /// </summary>
        /// <param name="testSets">The test sets.</param>
        /// <param name="methodMap">The method map.</param>
        /// <param name="test">The test.</param>
        /// <param name="comparer">The comparer.</param>
        /// <returns>a new <see cref="Failure"/> if results are inconsistent; otherwise <see langword="null"/>.</returns>
        public static Failure Test(
                    TestSets testSets,
                    MethodMap methodMap,
                    int test,
                    IEqualityComparer<object> comparer)
        {
            IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> results = testSets
                .Where(t => t.Results != null)
                .Select(t => (TestSet: t, Result: methodMap.GetResult(t.Results, test)))
                .GroupBy(r => r.Result, r => r.TestSet, comparer)
                .Select(g => (Result: g.Key, TestSets: (IReadOnlyList<TestSet>)g.ToArray()))
                .OrderByDescending(g => g.TestSets.Count)
                .ToArray();

            if (results.Count == 1)
            {
                // Results were all identical!
                return null;
            }

            return new Failure(methodMap, methodMap.GetParameters(testSets.TestData, test), results);
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString() => _string;
    }

}