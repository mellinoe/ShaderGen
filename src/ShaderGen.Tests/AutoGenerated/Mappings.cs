using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using Xunit;

namespace ShaderGen.Tests.AutoGenerated
{
    /// <summary>
    /// Holds information about the mappings of tested methods to the buffer.
    /// </summary>
    internal class Mappings
    {
        /// <summary>
        /// The size of the input structure.
        /// </summary>
        public readonly int StructSize;

        /// <summary>
        /// The buffer size is a <see cref="StructSize">single struct size</see> * <see cref="Methods">number of methods</see>.
        /// As such it is the size of the buffer required to run each method exactly once.
        /// </summary>
        public readonly int BufferSize;

        /// <summary>
        /// The result set size is the amount of space required to store the results of every method exactly once. 
        /// </summary>
        public readonly int ResultSetSize;

        /// <summary>
        /// The number of methods.
        /// </summary>
        public readonly int Methods;

        /// <summary>
        /// The buffer fields by name.
        /// </summary>
        public readonly IReadOnlyDictionary<string, PaddedStructCreator.Field> BufferFields;

        /// <summary>
        /// The method maps.
        /// </summary>
        public readonly IReadOnlyList<MethodMap> MethodMaps;

        /// <summary>
        /// Initializes a new instance of the <see cref="Mappings" /> class.
        /// </summary>
        /// <param name="structSize">Size of the input structure.</param>
        /// <param name="bufferFields">The buffer fields.</param>
        /// <param name="methodMaps">The methodMaps.</param>
        public Mappings(int structSize, IReadOnlyDictionary<string, PaddedStructCreator.Field> bufferFields, IReadOnlyCollection<(int Index, MethodInfo Method, IReadOnlyDictionary<ParameterInfo, string> Parameters, string ReturnField)> methodMaps)
        {
            StructSize = structSize;
            BufferFields = bufferFields;
            BufferSize = structSize * methodMaps.Count;
            Methods = methodMaps.Count;

            int resultSetSize = 0;
            MethodMap[] mmArray = new MethodMap[Methods];
            foreach ((int Index, MethodInfo Method, IReadOnlyDictionary<ParameterInfo, string> Parameters, string ReturnField) map in methodMaps)
            {
                PaddedStructCreator.Field returnField = map.ReturnField != null ? BufferFields[map.ReturnField] : null;

                mmArray[map.Index] = new MethodMap(
                    this,
                    map.Index,
                    map.Method,
                    map.Parameters.ToDictionary(kvp => kvp.Key, kvp => BufferFields[kvp.Value]),
                    returnField,
                    resultSetSize);

                if (returnField != null)
                {
                    resultSetSize += returnField.AlignmentInfo.ShaderSize;
                }
            }

            MethodMaps = mmArray;
            ResultSetSize = resultSetSize;
        }

        /// <summary>
        /// Gets the results from the pointer into a result set.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="results">The result set</param>
        /// <param name="test">The test number.</param>
        public void SetResults(IntPtr data, byte[] results, int test)
        {
            foreach (MethodMap method in MethodMaps)
            {
                if (method.ResultField == null)
                {
                    continue;
                }

                method.SetResult(data, results, test);
            }
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString() => $"Mappings for {Methods} methods.";
    }
}